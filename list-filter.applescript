try	tell application "iTunes"		set currentTrack to name of current track -- get the name of the current track		set trackID to database ID of current track -- get the ID for use in checking playlist membership	end tellon error	-- offer to send to itunes if no song playing	return "<?xml version='1.0'?><items>" & my createItem("play", "null", "Launch iTunes", "No track currently playing", "icon.png")end tryset query to "{query}" -- get the search queryset listLimit to 20 -- max playlists shown-- search iTunes playlists for the querytell application "iTunes"	-- Playlist search	if query is "*" then		set allPlaylists to every user playlist whose smart is false and special kind is none	else		set allPlaylists to every user playlist whose name contains query and smart is false and special kind is none	end if	set xml to "<?xml version='1.0'?><items>" -- create XML string		-- inform user that no results were found (prompt to launch iTunes instead)	if length of allPlaylists is 0 then		set xml to xml & my createItem("play", "null", "Launch iTunes", ("No playlists found with " & quote & query & quote), "icon.png")	else		set playlistIndex to 0		-- create the playlist entries		repeat with aPlaylist in allPlaylists						-- respect the playlist limit			if playlistIndex â‰¥ listLimit then				exit repeat			end if						set playlistId to (get persistent ID of aPlaylist)			set playlistName to name of aPlaylist			set searchR to search aPlaylist for currentTrack			if length of (search aPlaylist for currentTrack) > 0 then				set action to "remove-" & playlistId & "-" & trackID				set subtitleText to "REMOVE " & quote & currentTrack & quote & " from playlist " & quote & playlistName & quote			else				set subtitleText to "ADD " & quote & currentTrack & quote & " to playlist " & quote & playlistName & quote				set action to "add-" & playlistId & "-" & trackID			end if									-- add song information to XML			set xml to xml & my createItem(("playlist-" & playlistId), action, playlistName, subtitleText, "icon.png")			set playlistIndex to playlistIndex + 1		end repeat				set xml to xml & "</items>"			end if	end tellreturn xml -- return XML-- Helper Functionson replaceString(replaceThis, withThat, original)	set my text item delimiters to replaceThis	set tempItems to every text item of original	set my text item delimiters to withThat	return tempItems as textend replaceString-- escape XML forbidden characters in the given stringon escapeXmlChars(str)	set str to replaceString("&", "&amp;", str)	set str to replaceString("'", "&apos;", str)	set str to replaceString("\"", "&quot;", str)	set str to replaceString("<", "&lt;", str)	set str to replaceString(">", "&gt;", str)	return strend escapeXmlChars-- create XML itemon createItem(uid, arg, title, subtitle, icon)	-- escape forbidden XML characters	set title to escapeXmlChars(title)	set subtitle to escapeXmlChars(subtitle)		return "<item uid='" & uid & "' arg='" & arg & "'>
	<title>" & title & "</title>
	<subtitle>" & subtitle & "</subtitle>
	<icon>" & icon & "</icon>
	</item>"end createItem